Article,Title,Description,URL,Content,Published
0,How to Keep Track of Page Views on Your Blog Using Supabase,Google Analytics can be overkill for a basic site and you can easily create a basic alternative.,https://www.makeuseof.com/supabase-page-views-track/,Page views are an important metric for tracking web performance. Software tools like Google Analytics and Fathom provide a simple way of doing this with an external script. But maybe you dont want to use a thirdparty library. In such a case you can use a database to keep track of your sites visitors. Supabase is an opensource Firebase alternative that can help you keep track of page views in real time. Prepare Your Site to Start Tracking Page Views You need to have a Next. js blog to follow along with this tutorial. If you dont already have one you can create a Markdownbased blog using reactmarkdown. You can also clone the official Next. js blog starter template from its GitHub repository. Supabase is a Firebase alternative that provides a Postgres database authentication instant APIs Edge Functions realtime subscriptions and storage. You will use it to store the page views for each blog post. Create a Supabase Database Go to the Supabase website and sign in or sign up for an account. On the Supabase dashboard click on and choose an organization Supabase will have created an organization under the username of your account. New Project Fill in the project name and the password then click Create new project. In the settings page under the API section copy the project URL and the public and secret keys. Open the. env. local file in Next. js project and copy these API details. NEXTPUBLICSUPABASEURLnNEXTPUBLICSUPABASEKEYnSUPABASESERVICEKEYn Next navigate to the SQL editor and click on. New query Use the standard SQL command to create a table called views. CREATE TABLE views n id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEYn slug text UNIQUE NOT NULLn viewcount bigint DEFAULT 1 NOT NULLn updatedat timestamp DEFAULT NOW NOT NULLnn Alternatively you can use the table editor to create the views table The table editor is on the left pane of the dashboard. Create a Supabase Stored Procedure to Update Views Postgres has builtin support for SQL functions which you can call via the Supabase API. This function will be responsible for incrementing the view count in the views table. To create a database function follow these instructions Go to the SQL editor section on the left pane. Click New Query. Add this SQL query to create the database function. CREATE OR REPLACE FUNCTION updateviewspageslug TEXT RETURNS void LANGUAGE plpgsql AS BEGIN IF EXISTS SELECT FROM views WHERE slugpageslug THEN UPDATE views SET viewcount viewcount 1 updatedat now WHERE slug pageslug ELSE INSERT into viewsslug VALUES pageslug END IF END Click Run or Cmd Enter Ctrl Enter to execute the query. This SQL function is called updateviews and accepts a text argument. It first checks whether that blog post already exists in the table and if it does it increments its view count by 1. If it doesnt it creates a new entry for the post whose view count defaults to 1. Set Up Supabase Client in Next. js Install and Configure Supabase Install supabasesupabasejs package via npm to connect to the database from Next. js. npm installsupabasejsn Next create a libsupabase. ts file in the root of your project and initialize the Supabase client. import createClient from supabasesupabasejsnconst supabaseUrl string process. env. NEXTPUBLICSUPABASEURL nconst supabaseServerKey string process. env. SUPABASESERVICEKEY nconst supabase createClientsupabaseUrl supabaseServerKeynexport supabase n Remember you saved the API credentials in. env. local when you created the database. Update Page Views Create an API route that fetches the page views from Supabase and updates the view count every time a user visits a page. You will create this route in the api folder inside a file called viewsslug. ts. Using brackets around the file name creates a dynamic route. Matched parameters will be sent as a query parameter called slug. import supabase from...... libsupabaseadminnimport NextApiRequest NextApiResponse from nextnconst handler async req NextApiRequest res NextApiResponse n if req. method POST n await supabase. rpcupdateviews n pageslug req. query. slugn n return res. status200. jsonn message Successn n n if req. method GET n const data await supabasen. fromviewsn. selectviewcountn. filterslug eq req. query. slugn if data n return res. status200. jsonn total data0. viewcount 0n n n n return res. status400. jsonn message Invalid requestn nnexport default handlern The first if statement checks whether the request is a POST request. If it is it calls the updateviews SQL function and passes in the slug as an argument. The function will increment the view count or create a new entry for this post. The second if statement checks if the request is a GET method. If it is it fetches the total view count for that post and returns it. If the request is not a POST or GET request the handler function returns an Invalid request message. Add Page Views to the Blog To track page views you need to hit the API route every time a user navigates to a page. Start by installing the swr package. You will use it to fetch the data from the API. npm install swrn swr stands for stale while revalidate. It allows you to display the views to the user while fetching uptodate data in the background. Then create a new component called viewsCounter. tsx and add the following import useSWR from swrninterface Props n slug stringnnconst fetcher async input RequestInfo n const res Response await fetchinputn return await res. jsonnnconst ViewsCounter slug Props nconst data useSWRapiviewsslug fetchernreturn n spann data. total data. total 0n viewsspann nnexport default ViewsCountern This component renders the total views for each blog. It accepts a posts slug as a prop and uses that value to make the request to the API. If the API returns views it displays that value otherwise it displays 0 views. To register views add the following code to the component that renders each post. import useEffect from reactnimport ViewsCounter from.... componentsviewsCounterninterface Props n slug stringnnconst Post slug Props n useEffect n fetchapiviewsslug n method POSTn n slugnreturn n divn ViewsCounter slugslugn blog contentn divnnnexport default Postn Check the Supabase database to see how the view count is updating. It should increase by 1 every time you visit a post. Tracking More Than Page Views Page views let you know how many users are visiting specific pages on your site. You can see which pages are performing well and which arent. To go even further keep track of your visitors referrer to see where traffic is coming from or create a dashboard to help visualize the data better. Remember you can always simplify things by using an analytics tool like Google Analytics.,2022-12-27T12:00:15Z
1,Save 97% off the 2023 Solidity & Flutter Developer Bundle,"Expert developer Rahul Agarwal will take you through six courses to help you create cross-platform apps in the Solidity and Flutter space. Save over $1,350 off the normal cost as well. Read more...",https://www.neowin.net/deals/save-97-off-the-2023-solidity--flutter-developer-bundle/,Todays highlighted deal comes via our Online Courses section of the Neowin Deals store where you can save 97 off the 2023 Solidity Flutter Developer Bundle. This bundle includes the following courses JobReady Flutter Complete Course with Firebase Dart Master the Art of Building CrossPlatform Application Using Flutter Firebase Build a Decentralized Todo Application Using Solidity React Master the Art of Building Web3 Application Using Solidity Hardhat Ethers React Learn to Create Sell Your Own NFT Using Solidity Create Your Own NFT from Scratch Using Solidity Hardhat OpenZeppelin Alchemy Build a Basic Chat App Using Flutter Firebase Learn to Implement All the Concepts of Flutter Firebase Android iOS Build a Decentralized Library Management with Solidity Next JS Rahul Agarwal 16 Lessons 2h Build a Full Stack NFT Marketplace Using Solidity Next JS Rahul Agarwal 26 Lessons 1h Heres the deal This 2023 Solidity Flutter Developer Bundle normally costs 1200 but you can pick it up for just 24. 99 for a limited time that represents a saving of 1375. 01 97 off. For a full description specs and instructor info click the link below. 2023 Solidity Flutter Developer Bundle for just 24. 99 More Neowin Deals. We post these because we earn commission on each sale so as not to rely solely on advertising which many of our readers block. It all helps toward paying staff reporters servers and hosting costs. Other ways to support Neowin The above deal not doing it for you but still want to help Check out the links below. Check out our partner software in the Neowin Store Buy a Tshirt at Neowins Threadsquad Subscribe to Neowin for 14 a year or 28 a year for an adfree experience Disclosure An account at Neowin Deals is required to participate in any deals powered by our affiliate StackCommerce. For a full description of StackCommerces privacy guidelines go here. Neowin benefits from shared revenue of each sale made through our branded deals site.,2022-12-31T18:00:01Z
2,Upload Files from Google Drive to Google Cloud Storage with Google Apps Script,This tutorial describes how you can upload files and folders from your Google Drive to a bucket in Google Cloud Storage using Google Apps Script.,https://www.labnol.org/code/20074-upload-files-to-google-cloud-storage,Upload Files from Google Drive to Google Cloud Storage with Google Apps Script This tutorial describes how you can upload files and folders from your Google Drive to a bucket in Google Cloud Storage using Google Apps Script. This tutorial describes how you can upload files and folders from your Google Drive to a bucket in Google Cloud Storage using Google Apps Script. You can even set up a timebased trigger like a cron job that watches a folder in your Google Drive and automatically upload new incoming files to Google Cloud Storage. The same technique can also be used to upload files from Google Drive to Firebase Storage. Create Google Cloud Storage Bucket To get started go to console. cloud. google. comprojectcreate and create a new Google Cloud Project. Once the project has been added go to console. cloud. google. comstoragecreatebucket and create a new bucket. Give your bucket a unique name and select the region where you want to store your data. If the files you are uploading are private and you dont want to make them public anytime later you may enable the Enforce public access prevention on this bucket option. Create Storage Service Account Next go to IAM Admin Service Accounts console. cloud. google. comiamadminserviceaccountscreate and create a new service account. Give your service account a name and select the Storage Admin role. You may also want to add the Service Account Token Creator role to the service account as this is required to create signed URLs for the files you upload to Google Cloud Storage. From the list of service accounts click the one you created in the previous step. Go to the Keys tab and click on Add Key Create New Key and select the JSON option. This will download a JSON file containing the service account credentials. You will need these credentials to upload files to Google Cloud Storage. Write Google Apps Script Code Go to script. new to create a new Google Apps Script project. Click on Libraries and add the OAuth2 library 1B7FSrk5Zi6L1rSxxTDgDEUsPzlukDsi4KGuTMorsTQHhGBzBkMun4iDF to your project. Next add a new file service. js and use the values of privatekey and clientemail from your service account JSON file to create a new OAuth2 service. service. js Replace these with your own values const serviceaccount privatekey BEGIN PRIVATE KEYn51CjpLsH8AnEND PRIVATE KEYn clientemail uploadstoragelabnol. iam. gserviceaccount. com const getStorageService OAuth2. createServiceFirestoreStorage. setPrivateKeyserviceaccount. privatekey. setIssuerserviceaccount. clientemail. setPropertyStorePropertiesService. getUserProperties. setCacheCacheService. getUserCache. setTokenUrlhttpsoauth2. googleapis. comtoken. setScopehttpswww. googleapis. comauthdevstorage. readwrite Upload Files to Google Cloud Storage Next well write the upload function in Apps Script. The function takes the file ID of the file you want to upload to Google Cloud Storage the name of the bucket and the path where you want to store the file. The function uses the getStorageService function from the previous step to create a new OAuth2 service. The getAccessToken method of the OAuth2 service is used to get the access token required to upload files to Google Cloud Storage. Replace these with your own values const DRIVEFILEID abc123 const STORAGEBUCKET labnol. appspot. com const FILEPATH parentFoldersubFolder const uploadFileToCloudStorage const file DriveApp. getFileByIdDRIVEFILEID const blob file. getBlob const bytes blob. getBytes const API httpswww. googleapis. comuploadstoragev1b const location encodeURIComponentFILEPATHfile. getName const url APISTORAGEBUCKETouploadTypemedianamelocation const service getStorageService const accessToken service. getAccessToken const response UrlFetchApp. fetchurl method POST contentLength bytes. length contentType blob. getContentType payload bytes headers Authorization Bearer accessToken const result JSON. parseresponse. getContentText Logger. logJSON. stringifyresult null 2 Also see File Upload Forms for Google Drive Amit Agarwal Google Developer Expert Google Cloud Champion Amit Agarwal is a Google Developer Expert in Google Workspace and Google Apps Script. He holds an engineering degree in Computer Science I. I. T. and is the first professional blogger in India. Amit has developed several popular Google addons including Mail Merge for Gmail and Document Studio. Read more on Lifehacker and YourStory,2022-12-31T18:30:00Z
